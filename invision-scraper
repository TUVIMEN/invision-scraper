#!/bin/bash
# by Dominik Stanis≈Çaw Suchora <suchora.dominik7@gmail.com>
# License: GNU GPLv3

shopt -s extglob

declare maxprocs='1' nousers='0' noreactions='0' _cookies

IFS=$'\n'

ucurl() {
    #curl -k -L -g -m 120 -s -b "$_cookies" --user-agent 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) QtWebEngine/5.15.2 Chrome/87.0.4280.144 Safari/537.36' -H 'Accept-Encoding: gzip, deflate' --compressed "$@"
    curl -k -L -g -m 120 -s --compressed -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:125.0) Gecko/20100101 Firefox/125.0' -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8' -H 'Accept-Language: en-US,en;q=0.5' -H 'Accept-Encoding: gzip, deflate, br' -H 'Referer: https://linustechtips.com/?__cf_chl_tk=cNxm36Q60vWhEcUez0xkdbFWj5jMIeDrDCeYSEGWaKM-1714634677-0.0.1.1-1173' -H 'DNT: 1' -H 'Sec-GPC: 1' -H 'Connection: keep-alive' -H 'Cookie: cf_clearance=xvgwivcm28amI4sL8I3153NbUKNY4aVFM9aF96LleXw-1714634677-1.0.1.1-TARhTGJLJYTNCQVMxz_hj.GCUX_YcY7a_PSu2Uth_t.6MtSUuEOwf3zdqoY7Dvx6pS5QjdhCy7UlGCiB6rfVMw; ips4_IPSSessionFront=pcn1hkgo7rhf7p6kaee5od371o; ips4_ipsTimezone=UTC; ips4_hasJS=true' "$@"
}

get_user() {
    [ -z "$1" ] && return
    [[ "$1" =~ ^http[s]?://([[:alnum:]-]+\.)+[[:alpha:]]+/.*/([[:digit:]]+)(-[^/]*)?(/)?$ ]] || { echo "improper url - $1"; return; }
    local -r id="${BASH_REMATCH[2]}"
    [ -e "m-$id" ] && return
    echo "$1" >&2
    local delim='?'
    [[ "$1" =~ .*\?.* ]] && delim='&'
    local -r t="$(ucurl -H 'X-Requested-With: XMLHttpRequest' "$1${delim}do=hovercard" | tr -d '\n\a\r\t')"
    echo "$t" > j

    {
    echo "$1" #link
    echo "$id" #id
    reliq '
        . h2 class=b>"ipsType_reset ipsType_"; a | "%i\n",
        . div .ipsCoverPhoto_container; img src | "%(src)v\n",
        . img src .ipsUserPhoto | "%(src)v\n",
        . p class="ipsType_reset ipsType_normal"; * c@[0] | "%i\n",

        . p class="ipsType_reset ipsType_medium ipsType_light" m@b>"Joined "; time datetime | "%(datetime)v\n",
        . div .cUserHovercard_data; li m@">Joined<"; time datetime | "%(datetime)v\n",

        . p class="ipsType_reset ipsType_medium ipsType_light" m@b>"Last visited "; time datetime | "%(datetime)v\n",
        . div .cUserHovercard_data; li m@">Last visited<"; time datetime | "%(datetime)v\n",

        . dl; div l@[1]; {
            dt | "%i\a",
            dd | "%i"
        } | echo "" "\t" / echo "" "\n",
        . div class=b>"ipsFlex ipsFlex-ai:center "; div class="ipsFlex ipsFlex-ai:center"; img title | "%(title)v\n",
        . div class=b>"ipsFlex ipsFlex-ai:center "; div class="ipsFlex ipsFlex-ai:center"; time datetime | "%(datetime)v\n",
        . div class=b>"ipsFlex ipsFlex-ai:center "; ul; li; img alt | "%(alt)v\t" / echo "" "\n"
    ' <<< "$t"
    } | jq -RnMc '
        .["link"]=input |
        .["id"]=input |
        .["name"]=input |
        .["background"]=input |
        .["avatar"]=input |
        .["group"]=input |
        .["joined"]=(input+input) |
        .["lastseen"]=(input+input) |
        .["info"]=(input | split("\t")[:-1] | map(split("") | {
            ("name"):.[0],
            ("value"):.[1]
        })) |
        .["rank"]=input |
        .["rank_date"]=input |
        .["badges"]=((input | split("\t"))[:-1])' > "m-$id"
}

get_thread() {
    [[ "$1" =~ ^http[s]?://([[:alnum:]-]+\.)+[[:alpha:]]+/.*/([[:digit:]]+)(-[^/]*)?(/)?$ ]] || { echo "improper url - $1"; return; }
    local -r id="${BASH_REMATCH[2]}"
    [ -e "$id" ] && return
    echo "$1" >&2
    local t="$(ucurl -D- "$1" | tr -d '\r\n\t\a\v')"
    local t2
    local next next2

    {
    echo "$1" #link
    echo "$id" #id

    reliq '
        . div #ipsLayout_mainArea; h1 class="ipsType_pageTitle ipsContained_container"; span class="ipsType_break ipsContained"; span -class | "%i\n",
        . div #ipsLayout_mainArea; h1 class="ipsType_pageTitle ipsContained_container"; span title | "%(title)v\a" / echo "" "\n",
        . ul .ipsRating_collective; li .ipsRating_on | "1\n",
        . div .ipsPageHeader; a .ipsType_break href | "%(href)v\n",
        . div .ipsPageHeader; a .ipsType_break href; * c@[0] | "%i\n",
        . div .ipsPageHeader; a .ipsUserPhoto; img src | "%(src)v\n",
        . div .ipsPageHeader; a .ipsFollow; span .ipsCommentCount | "%i\n",
        . div class="ipsFlex-flex:11"; time datetime | "%(datetime)v\n",
        . nav class=b>"ipsBreadcrumb ipsBreadcrumb_top "; ul data-role="breadcrumbList"; li; a; span | "%i/" / echo "" "\n",

        . div .ipsPageHeader; ul .ipsTags; a; span c@[0] | "%i\t" / echo "" "\n",
        . div #ipsLayout_mainArea; h1 class="ipsType_pageTitle ipsContained_container"; a .ipsTag_prefix rel=tag; span c@[0] | "%i\t" / echo "" "\n",

        . div .cTopicPostArea; span .ipsType_warning | "%i\n",
        . section data-controller=core.front.core.poll; h2 l@[1]; span l@[1] | "%i\n" / sed "s/<.*//;s/&nbsp;//g;s/ *$//"
    ' <<< "$t"

    echo "$( 
        for i in $(reliq 'section data-controller="core.front.core.poll"; ol class="ipsList_reset cPollList"; li l@[1] | "%i\n"' <<< "$t")
        do
            echo -n "$(reliq 'h3 l@[0]; span | "%i"' <<< "$i")" #question
            echo "$( 
                paste -d '' \
                    <(reliq 'ul l@[0]; li; div .ipsGrid_span4 | "%i\n"' <<< "$i") \
                    <(reliq 'ul l@[0]; li; div .ipsGrid_span1; * m@E>"^(<[^>]*>[^<]*</[^>]*>)?[^<]+$" | "%i\n" / sed "s/^<i.*<\/i> //"' <<< "$i") \
                    <(
                        for j in $(reliq 'ul l@[0]; li; div .ipsGrid_span1; * m@E>"^(<[^>]*>[^<]*</[^>]*>)?[^<]+$" | "%i\n"; a title href | "%(href)v\n" / sed "s/&amp;/&/g"' <<< "$i")
                        do
                            t2="$(ucurl -H 'X-Requested-With: XMLHttpRequest' "$j" | tr -d '\n\r\t\a\v\f')"
                            paste -d '\t' \
                                <(reliq 'div; h3 | "%i\n"' <<< "$t2") \
                                <(reliq 'li / sed "/<a href="/!{s/^.*$//}; s/^.*<a href="//; s/".*$//"' <<< "$t2") \
                                <(reliq 'li; img src | "%(src)v\n"' <<< "$t2") \
                                <(reliq 'div; time datetime | "%(datetime)v\n"' <<< "$t2") \
                                | paste -sd '' #voters
                        done) | paste -sd ''
            )" #answers
        done | paste -sd '')" #poll.questions

    reliq '. div data-role=recommendedComments; div .ipsBox data-commentID; {
        . div .ipsBox data-commentID | "%(data-commentID)v\n",
        . div .ipsColumn; * .ipsComment_meta; a .ipsType_break href | "%(href)v\n",
        . div .ipsColumn; * .ipsComment_meta; a .ipsType_break href; * c@[0] | "%i\n",
        . aside; img src | "%(src)v\n",
        . div .ipsColumn; * .ipsComment_meta; time datetime | "%(datetime)v\n",
        . div .ipsReactOverview; ul; li; img alt | "%(alt)v\t" / echo "" "\n",
        . div .ipsReactOverview; p class="ipsType_reset ipsType_center" | "%i\n",
        . div .ipsColumn; a .ipsButton href | "%(href)v\n",
        . div .ipsColumn; a .ipsType_break href c@[0] l@[1] | "%(href)v\n%i\n",
        . div .ipsColumn; div .ipsType_richText | "%i\n"
    } | tr "\n" "\a" echo "" "\v" / echo "" "\n"' <<< "$t" #recommended

    while :
    do
        for i in $(reliq 'article #B>elComment_[0-9]*' <<< "$t")
        do
            {
            t2="$(reliq 'aside; h3 class=b>"ipsType_sectionHead cAuthorPane_author "; a href | "%(href)v\n"' <<< "$i")" #user_link
            echo "$t2"

            if [ "$nousers" -eq 0 -a -n "$t2" ]
            then
                get_user "$t2"
            fi

            reliq '
                . article #B>elComment_[0-9]* | "%(id)v\n" / sed "s/^elComment_//",
                . aside; h3 class=b>"ipsType_sectionHead cAuthorPane_author "; * c@[0] [0] | "%i\n",
                . aside; * .cAuthorPane_photo data-role=photo; a .ipsUserPhoto; img src | "%(src)v\n",

                . aside; * .cAuthorPane_photo data-role=photo; img title alt | "%(alt)v\a" / echo "" "\n",
                . aside; * .cAuthorPane_photo data-role=photo; span .cAuthorPane_badge title=e>" joined recently" | "%(title)v\a" / echo "" "\n",

                . aside; ul .cAuthorPane_info; li data-role=group; * c@[0] | "%i\n",
                . aside; ul .cAuthorPane_info; li data-role=group-icon; img src | "%(src)v\n",
                . aside; ul .cAuthorPane_info; li data-role=rank-title | "%i\n",
                . aside; ul .cAuthorPane_info; li data-role=rank-image; * | "%i\n",
                . aside; ul .cAuthorPane_info; li data-role=reputation-badge; span | "%i\n" / sed "s/^<i .*<\/i> //;s/,//g;q",
                . aside; ul .cAuthorPane_info; li data-role=posts | "%i\n" / sed "s/ .*//;s/,//g",
                . aside; ul .cAuthorPane_info; li data-role=custom-field | "%i\n",
                . aside; ul .cAuthorPane_info; ul .ipsList_reset; li; a title l@[1] | "%(title)v\a" / echo "" "\n",
                . div .ipsComment_meta; div class=a>"ipsComment_badges"; ul .ipsList_reset; li; strong | "%i\a" / echo "" "\n" sed "s#<i [^>]*></i> ##g",
                . div .ipsComment_meta; time datetime | "%(datetime)v\n",
                . div .cPost_contentWrap; div data-role=commentContent | "%i\n",
                . div data-role=memberSignature; div data-ipslazyload | "%i\n",
                . ul .ipsReact_reactions; li .ipsReact_overview; a rel href | "%(href)v\a%i\v" / echo "" "\n",
                . ul .ipsReact_reactions; li .ipsReact_reactCount; span a@[0] / sed ":x;s/<span><img .* alt=\"//; s/\".*//; N; s/\n/\v/; s/<span>//; s/<\/span>//; N; s/\n/\a/; $q; bx" echo "" "\n",
            ' <<< "$i"

            if [ "$noreactions" -eq 0 ]
            then
                next2="$(reliq 'ul .ipsReact_reactions; li .ipsReact_reactCount; a href | "%(href)v\n" / sed "s/&amp;/\&/g; s/&reaction=[0-9]+/&changed=1&reaction=all/;q" "E"' <<< "$i")"
                echo "$(while :
                do
                    [ -z "$next2" ] && break
                    echo "$next2" >&2
                    t2="$(ucurl -H 'X-Requested-With: XMLHttpRequest' "$next2" | tr -d '\n\r\t\a\v')"
                    reliq 'ol; li; {
                        a .ipsUserPhoto; img src | "%(src)v\v",
                        a .ipsType_break href | "%(href)v\v%i\v",
                        span .ipsType_light; img src | "%(src)v\v",
                        time datetime | "%(datetime)v\a"
                    } | sed "s#\v[^\v]+/reactions/([^\.]*)\.[^\v]+#\v\1#" "E"' <<< "$t2"
                    next2="$(reliq 'li .ipsPagination_next -.ipsPagination_inactive; a href | "%(href)v\n" / sed "s/&amp;/&/; s/$/&changed=1&reactions=all/;q"' <<< "$t2")"
                done)" #reactions_details
            fi
            } | sed ':x;$!{N;s/\n/\t/;bx}'
        done #posts

        next="$(reliq 'ul .ipsPagination [0]; li .ipsPagination_next -.ipsPagination_inactive; a | "%(href)v\n" / sed "s#/page/([0-9]+)/.*#/?page=\1#" "E"' <<< "$t")"
        [ -z "$next" ] && break
        echo "$next" >&2
        t="$(ucurl -H 'X-Requested-With: XMLHttpRequest' "$next" | tr -d '\n\r\t\a\v')"
    done
    } | jq -RnMcs '
        (inputs | split("\n")) as $lines |
        .["link"]=$lines[0] |
        .["id"]=$lines[1] |
        .["title"]=$lines[2] |
        .["badges"]=($lines[3] | split(""))[:-1] |
        .["rating"]=$lines[4] |
        .["user_link"]=$lines[5] |
        .["user"]=$lines[6] |
        .["user_avatar"]=$lines[7] |
        .["user_followers"]=$lines[8] |
        .["date"]=$lines[9] |
        .["path"]=$lines[10] |
        .["tags"]=(($lines[11]+$lines[12]) | split("\t"))[:-1] |
        .["warning"]=$lines[13] |
        .["poll"]=($lines[14:16] | {
            ("title"):.[0],
            ("questions"):(.[1] | split("") | map(split("") | {
                ("question"):.[0],
                ("answers"):(.[1] | split("") | map(split("") | {
                    ("option"):.[0],
                    ("votes"):.[1],
                    ("voters"):(.[2] | split("") | map(split("\t") | {
                        ("user"):.[0],
                        ("user_link"):.[1],
                        ("user_avatar"):.[2],
                        ("date"):.[3]
                    }))
                }))
            }))
        }) |
        .["recommended"]=($lines[16] | split("\u000b")[:-1] | map(split("")[:-1] | {
            ("id"):.[0],
            ("user_link"):.[1],
            ("user"):.[2],
            ("user_avatar"):.[3],
            ("date"):.[4],
            ("reactions"):(.[5] | split("\t"))[:-1],
            ("reaction_count"):.[6],
            ("link"):.[7],
            ("ruser_link"):.[8],
            ("ruser"):.[9],
            ("content"):.[10]
        })) |
        .["posts"]=($lines[17:-1] | map(split("\t") | {
            ("id"):.[1],
            ("user_link"):.[0],
            ("user"):.[2],
            ("user_avatar"):(.[3]+.[4]),
            ("badges"):(.[5] | split(""))[:-1],
            ("group"):.[6],
            ("group_icon"):.[7],
            ("rank_title"):.[8],
            ("rank_image"):.[9],
            ("reputation_badge"):.[10],
            ("posts"):.[11],
            ("custom"):.[12],
            ("user_info"):(.[13] | split(""))[:-1],
            ("top_badges"):(.[14] | split(""))[:-1],
            ("date"):.[15],
            ("content"):.[16],
            ("signature"):.[17],
            ("reactions_users"):((.[18] | split("\u000b"))[:-1] | map(split("") | {
                ("link"):.[0],
                ("name"):.[1]
            })),
            ("reactions"):(.[19] | split("")[:-1] | map(split("\u000b") | {
                ("name"):.[0],
                ("count"):.[1]
            })),
            ("reactions_details"):((.[20] | split(""))[:-1] | map(split("\u000b") | {
                ("avatar"):.[0],
                ("user_link"):.[1],
                ("user"):.[2],
                ("reaction"):.[3],
                ("date"):.[4]
            }))
        }))' > "$id"
}

get_category() {
    for i in $(reliq 'li class=b>"cForumRow ipsDataItem "; div .ipsDataItem_main; h4; a href | "%(href)v\n", div .ipsForumGrid; a .cForumGrid__hero-link href | "%(href)v\n"' <&0)
    do
        get_forum "$i"
    done
}

get_forum() {
    local t next
    echo "$1" >&2
    t="$(ucurl "$1")"
    while :
    do
        for j in $(reliq 'ol data-role=tableRows; h4; a class="" href=e>"/" | "%(href)v\n"' <<< "$t")
        do
            [ "$(jobs | wc -l)" -gt "$maxprocs" ] && wait %%
            get_thread "$j" &
        done

        next="$(reliq 'ul .ipsPagination; li .ipsPagination_next -.ipsPagination_inactive; a | "%(href)v\n"' <<< "$t" | head -n1)"
        [ -z "$next" ] && break
        echo "$next" >&2
        t="$(ucurl -H 'X-Requested-With: XMLHttpRequest' "$next")"
    done
    get_category <<< "$t"
}

usage() {
    printf '%s [OPTION]... [URL]...\n' "${0##*/}"
    printf 'Download, convert to json and save invision forums from URL.\n\n'
    printf 'Options:\n  -d,\t--dir DIR\t\tchange directory to DIR\n'
    printf '  -p,\t--max-procs NUM\t\tset number of processes to run at a time\n'
    printf '  -b,\t--cookie DATA|FILENAME\tpass cookie to curl\n'
    printf '  -t,\t--thread URL\t\tpass URL as thread link\n'
    printf '  -f,\t--forum URL\t\tpass URL as forum link\n'
    printf '  -c,\t--category URL\t\tpass URL as category link, can be used to download the whole forum\n'
    printf '  -n,\t--no-reactions\t\tdo not download reactions to posts\n'
    printf '  -N,\t--no-users\t\tdo not download users\n'
    printf '  -h,\t--help\t\t\tshow this message\n'
}

[ "$#" -eq 0 ] && { usage >&2; exit 1; }

while [ "$#" -gt 0 ]
do
    case "$1" in
        -d|--dir) cd "$2" || exit; shift;;
        -t|--thread)
            get_thread "$2"
            shift;;
        -f|--forum)
            get_forum "$2"
            shift;;
        -c|--category)
            ucurl "$2" | get_category "$2"
            shift;;
        -b|--cookie) _cookies="$2"; shift;;
        -p|--max-procs) maxprocs="$2"; shift;;
        -n|--no-reactions) noreactions='1';;
        -N|--no-users) nousers='1';;
        -h|--help) usage >&2; exit;;
        -*) usage >&2; exit 1;;
        *) break;;
    esac
    shift
done

while [ "$#" -gt 0 ]
do
    case "$1" in
        http?(s)://+(+([[:alnum:]-]).)+([[:alpha:]])/?(*[/?])@(thread?(s)|topic?(s))/*)
            get_thread "$1";;
        http?(s)://+(+([[:alnum:]-]).)+([[:alpha:]])/?(*[/?])forum?(s)/*)
            get_forum "$1";;
        http?(s)://+(+([[:alnum:]-]).)+([[:alpha:]])*)
            echo "$1" >&2
            ucurl "$1" | get_category "$1";;
    esac
    shift
done
